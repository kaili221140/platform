<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Operator">
  <resultMap type="net.sunniwell.camera.mybatis.model.Operator" id="OperatorResult">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="username" jdbcType="VARCHAR" property="username"/>
    <result column="password" jdbcType="VARCHAR" property="password"/>
    <result column="administrator" jdbcType="BOOLEAN" property="administrator"/>
  </resultMap>
<!--
  <select id="find" parameterType="long" resultMap="UserResult">
    SELECT * FROM user WHERE id = #{id:INTEGER}
  </select>

  <select id="version" parameterType="long" resultType="int">
    SELECT version FROM user WHERE id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="delete" parameterType="UserAlias">
    DELETE FROM user WHERE id = #{id:INTEGER}
  </delete>

  <insert id="insert" parameterType="UserAlias" useGeneratedKeys="false">
    INSERT INTO user
    ( id,
    username,
    password,
    administrator
    )
    VALUES
    ( #{id},
    #{username,jdbcType=VARCHAR},
    #{password.encrypted:VARCHAR},
    #{administrator,jdbcType=BOOLEAN}
    )
  </insert>

  <update id="update" parameterType="UserAlias">
    UPDATE user SET
    username = #{username,jdbcType=VARCHAR},
    password = #{password.encrypted,jdbcType=VARCHAR},
    administrator = #{administrator,jdbcType=BOOLEAN}
    WHERE
    id = #{id,jdbcType=INTEGER}
  </update>
     Unique constraint check
  <select id="isUniqueUsername" parameterType="map" resultType="boolean">
    SELECT (count(*) = 0)
    FROM user
    WHERE ((#{userId,jdbcType=BIGINT} IS NOT NULL AND id != #{userId,jdbcType=BIGINT}) OR #{userId,jdbcType=BIGINT} IS
    NULL)  other than me
    AND (username = #{username,jdbcType=VARCHAR})
  </select>
   -->
  <select id="findOperatorList" resultMap="OperatorResult">
  	SELECT id,username,password,administrator FROM operator WHERE 1 = 1
  </select>
  
  <select id="findOperatorByUsername" resultMap="OperatorResult" parameterType="net.sunniwell.camera.mybatis.model.Operator">
	SELECT id,username,password,administrator FROM operator 
	<where>
		<if test="username != null and !&quot;&quot;.equals(username.trim())">
			and username=#{username}
		</if>
	</where>
  </select>
  
  <select id="findById" resultMap="OperatorResult" parameterType="int">
  	SELECT id,username,password,administrator FROM operator 
	<where>
		id=#{_parameter}
	</where>
  </select>
  
  <insert id="insertOperator" parameterType="net.sunniwell.camera.mybatis.model.Operator">
    INSERT INTO operator
    (	id,
	    username,
	    password,
	    administrator
    )
    VALUES
    (
    	#{id},
	    #{username,jdbcType=VARCHAR},
	    #{password,jdbcType=VARCHAR},
	    #{administrator,jdbcType=BOOLEAN}
    )
  </insert>
  
  <delete id="deleteOne" parameterType="int">
  	delete from operator 
  	<where>
  		id=#{_parameter}
  	</where>
  </delete>
  
  <delete id="deleteByIdLE" parameterType="int">
  	delete from operator
  	<where>
  		id>=#{_parameter}
  	</where>
  </delete>
  
  <insert id="batchInsertOperator" parameterType="java.util.List">
  	INSERT INTO operator
    (	id,
	    username,
	    password,
	    administrator
    )
    VALUES
    <foreach item="item" index="index" collection="list" separator=",">
       (#{item.id,jdbcType=INTEGER},#{item.username,jdbcType=VARCHAR},#{item.password,jdbcType=VARCHAR},#{item.administrator,jdbcType=BOOLEAN})
    </foreach>
  </insert>
  
  <update id="updateOperator" parameterType="net.sunniwell.camera.mybatis.model.Operator">
    UPDATE operator SET
    username = #{username,jdbcType=VARCHAR},
    password = #{password,jdbcType=VARCHAR},
    administrator = #{administrator,jdbcType=BOOLEAN}
    WHERE
    id = #{id,jdbcType=INTEGER}
  </update>
  
</mapper>
